import typing
from pathlib import Path

import eccodes
import numpy as np
import xarray as xr

from ._util import (
    _check_message
)


def load_field_from_file(
        file_path: str or Path,
        parameter: str or typing.Dict,
        level_type: str or typing.Dict,
        level: int or typing.List,
) -> xr.DataArray or None:
    """
    Load **one** field from local GRIB2 file using eccodes-python.

    Parameters
    ----------
    file_path
    parameter
    level_type
    level

    Returns
    -------
    DataArray or None:
        DataArray if found, or None if not.

    Examples
    --------
    Load 850hPa temperature field from a GRIB2 file generated by GRAPES GFS.

    >>> load_field_from_file(
    ...     file_path="/sstorage1/COMMONDATA/OPER/NWPC/GRAPES_GFS_GMF/Prod-grib/2020031721/ORIG/gmf.gra.2020031800105.grb2",
    ...     parameter="t",
    ...     level_type="isobaricInhPa",
    ...     level=850,
    ...     engine="eccodes",
    ... )
    <xarray.DataArray (latitude: 720, longitude: 1440)>
    array([[249.19234375, 249.16234375, 249.16234375, ..., 249.15234375,
            249.19234375, 249.14234375],
           [249.45234375, 249.45234375, 249.42234375, ..., 249.45234375,
            249.44234375, 249.44234375],
           [249.69234375, 249.68234375, 249.68234375, ..., 249.70234375,
            249.67234375, 249.68234375],
           ...,
           [235.33234375, 235.45234375, 235.62234375, ..., 235.47234375,
            235.63234375, 235.48234375],
           [235.78234375, 235.91234375, 235.64234375, ..., 235.80234375,
            235.72234375, 235.82234375],
           [235.66234375, 235.86234375, 235.82234375, ..., 235.85234375,
            235.68234375, 235.70234375]])
    Coordinates:
      * latitude   (latitude) float64 89.88 89.62 89.38 ... -89.38 -89.62 -89.88
      * longitude  (longitude) float64 0.0 0.25 0.5 0.75 ... 359.0 359.2 359.5 359.8
    Attributes:
        GRIB_edition:                    2
        GRIB_centre:                     babj
        GRIB_subCentre:                  0
        GRIB_tablesVersion:              4
        GRIB_localTablesVersion:         1
        GRIB_dataType:                   fc
        GRIB_dataDate:                   20200318
        GRIB_dataTime:                   0
        GRIB_step:                       105
        GRIB_stepType:                   instant
        GRIB_stepUnits:                  1
        GRIB_stepRange:                  105
        GRIB_name:                       Temperature
        GRIB_shortName:                  t
        GRIB_cfName:                     air_temperature
        GRIB_discipline:                 0
        GRIB_parameterCategory:          0
        GRIB_parameterNumber:            0
        GRIB_gridType:                   regular_ll
        GRIB_gridDefinitionDescription:  Latitude/longitude
        GRIB_typeOfFirstFixedSurface:    pl
        GRIB_typeOfLevel:                isobaricInhPa
        GRIB_level:                      850
        GRIB_numberOfPoints:             1036800
        GRIB_missingValue:               9999
        GRIB_units:                      K
        long_name:                       Temperature
        units:                           K

    """
    messages = []
    with open(file_path, "rb") as f:
        while True:
            message_id = eccodes.codes_grib_new_from_file(f)
            if message_id is None:
                break
            if not _check_message(message_id, parameter, level_type, level):
                eccodes.codes_release(message_id)
                continue
            messages.append(message_id)
            if isinstance(level, typing.List):
                continue
            else:
                break

    if len(messages) == 0:
        return None

    if len(messages) == 1:
        message_id = messages[0]
        data = create_xarray_array(message_id)
        eccodes.codes_release(message_id)
        return data

    if len(messages) > 1:
        xarray_messages = [create_xarray_array(message) for message in messages]
        for m in messages:
            eccodes.codes_release(m)

        if isinstance(level_type, str):
            level_dim_name = level_type
        elif isinstance(level_type, typing.Dict):
            level_dim_name = _get_level_coordinate_name(xarray_messages[0])
        else:
            raise ValueError(f"level_type is not supported: {level_type}")

        data = xr.concat(xarray_messages, level_dim_name)
        return data

    return None


def create_xarray_array(message):
    """
    Create xarray.DataArray from one GRIB 2 message.
    """
    values = eccodes.codes_get_double_array(message, "values")

    attr_keys = [
        'edition',
        'centre',
        'subCentre',
        'tablesVersion',
        "localTablesVersion",
        'dataType',
        'dataDate',
        'dataTime',
        'step',
        'stepType',
        'stepUnits',
        'stepRange',
        "name",
        "shortName",
        'cfName',
        'discipline',
        'parameterCategory',
        'parameterNumber',
        'shortName',
        'gridType',
        'gridDefinitionDescription',
        'typeOfFirstFixedSurface',
        'typeOfLevel',
        'level',
        'numberOfPoints',
        "missingValue",
        'units',
    ]

    grid_keys = [
        'latitudeOfFirstGridPointInDegrees',
        'longitudeOfFirstGridPointInDegrees',
        'latitudeOfLastGridPointInDegrees',
        'longitudeOfLastGridPointInDegrees',
        'iDirectionIncrementInDegrees',
        'jDirectionIncrementInDegrees',
        'Ni',
        'Nj',
    ]

    level_keys = [
        "typeOfFirstFixedSurface",
        "typeOfSecondFixedSurface",
    ]

    all_keys = attr_keys + grid_keys + level_keys

    all_attrs = {}
    for key in all_keys:
        try:
            value = eccodes.codes_get(message, key)
        except:
            value = "undef"
        all_attrs[key] = value

    latitudeOfFirstGridPointInDegrees = all_attrs["latitudeOfFirstGridPointInDegrees"]
    longitudeOfFirstGridPointInDegrees = all_attrs["longitudeOfFirstGridPointInDegrees"]
    latitudeOfLastGridPointInDegrees = all_attrs["latitudeOfLastGridPointInDegrees"]
    longitudeOfLastGridPointInDegrees = all_attrs["longitudeOfLastGridPointInDegrees"]
    iDirectionIncrementInDegrees = all_attrs["iDirectionIncrementInDegrees"]
    jDirectionIncrementInDegrees = all_attrs["jDirectionIncrementInDegrees"]
    ni = all_attrs["Ni"]
    nj = all_attrs["Nj"]

    values = values.reshape(nj, ni)
    lons = np.linspace(longitudeOfFirstGridPointInDegrees, longitudeOfLastGridPointInDegrees, ni, endpoint=True)
    lats = np.linspace(latitudeOfFirstGridPointInDegrees, latitudeOfLastGridPointInDegrees, nj, endpoint=True)

    coords = {
        "latitude": lats,
        "longitude": lons,
    }

    # add level coordinate
    if all_attrs["typeOfLevel"] not in ("undef", "unknown"):
        coords[all_attrs["typeOfLevel"]] = all_attrs["level"]
    else:
        level_name = f"level_{all_attrs['typeOfFirstFixedSurface']}"
        if all_attrs['typeOfSecondFixedSurface'] != 255:
            level_name += f"{all_attrs['typeOfSecondFixedSurface']}"
        coords[level_name] = all_attrs["level"]

    data = xr.DataArray(
        values,
        dims=("latitude", "longitude"),
        coords=coords,
    )

    data_attrs = {f"GRIB_{key}": all_attrs[key] for key in attr_keys if all_attrs[key] not in ("undef", "unknown") }
    data.attrs = data_attrs

    if "GRIB_name" in data.attrs:
        data.attrs["long_name"] = data.attrs["GRIB_name"]
    else:
        name = (f"discipline={all_attrs['discipline']} "
                f"parmcat={all_attrs['parameterCategory']} "
                f"parm={all_attrs['parameterNumber']}")
        data.attrs["long_name"] = name

    if "GRIB_units" in data.attrs:
        data.attrs["units"] = data.attrs["GRIB_units"]
    return data


def _get_level_coordinate_name(data):
    coords = data.coords
    for coord in coords:
        if coord.startswith("level_"):
            return coord
    return None
